import random

#War game class setup

suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':11, 'Queen':12, 'King':13, 'Ace':14}

class Card:
    
    def __init__(self,suit,rank):
        self.suit = suit
        self.rank = rank
        self.value = values[rank]
        
    def __str__(self):
        return self.rank + ' of ' + self.suit
    
class Deck:
    
    def __init__(self):
        # creating new deck
        self.deck_cards = [] 
        for suit in suits:
            for rank in ranks:
                self.deck_cards.append(Card(suit,rank))
                
    def shuffle(self):
        random.shuffle(self.deck_cards)
        
    def deal_one(self):
        return self.deck_cards.pop()  

class Player:
    
    def __init__(self,name):
        self.name = name
        # new players will have 0 cards
        self.deck_cards = [] 
        
    def remove_one(self):
        return self.deck_cards.pop(0)
    
    def add_cards(self,new_cards):
        if type(new_cards) == type([]):
            self.deck_cards.extend(new_cards)
        else:
            self.deck_cards.append(new_cards)
    
    
    def __str__(self):
        return f'Player {self.name} has {len(self.deck_cards)} cards.'
    
#Game logic and setup
player_one = Player("One")
player_two = Player("Two")

new_deck = Deck()
new_deck.shuffle()

#Splitting the deck
len(new_deck.deck_cards)/2

for x in range(26):
    player_one.add_cards(new_deck.deal_one())
    player_two.add_cards(new_deck.deal_one())

#Gameplay
    
import pdb
game_on = True
round_num = 0
while game_on:
    
    round_num += 1
    print(f"Round {round_num}")
    
    # Player hand check:
    if len(player_one.deck_cards) == 0:
        print("Player One is out of cards!")
        print("Player Two Wins!")
        print("Game over!")
        game_on = False
        break
        
    if len(player_two.deck_cards) == 0:
        print("Player Two is out of cards!")
        print("Player One Wins!")
        print("Game over!")
        game_on = False
        break
    
    # Card reset
    player_one_cards = []
    player_one_cards.append(player_one.remove_one())
    
    player_two_cards = []
    player_two_cards.append(player_two.remove_one())
    
    at_war = True

    while at_war:

        #Determine which player has the higher card and who gets the cards
        if player_one_cards[-1].value > player_two_cards[-1].value:
            player_one.add_cards(player_one_cards)
            player_one.add_cards(player_two_cards)
            
            at_war = False
        
        elif player_one_cards[-1].value < player_two_cards[-1].value:
            player_two.add_cards(player_one_cards)
            player_two.add_cards(player_two_cards)
            
            at_war = False

        else:
            print('WAR!')
            
            # another hand check
            if len(player_one.deck_cards) < 5:
                print("Player One unable to play war!")
                print("Player Two Wins!")
                print("Game over!")
                game_on = False
                break

            elif len(player_two.deck_cards) < 5:
                print("Player Two unable to play war!")
                print("Player One Wins!")
                print("Game over!")
                game_on = False
                break

            else:
                for num in range(5):
                    player_one_cards.append(player_one.remove_one())
                    player_two_cards.append(player_two.remove_one())

#Game works + debugged
