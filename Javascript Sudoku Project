// FREEZE CODE BEGIN
// Puzzles to use to test your functions
//puzzle
let puzzle = [[ 8,9,5,   7,4,2,   1,3,6 ],
              [ 2,7,1,   9,6,3,   4,8,5 ],
              [ 4,6,3,   5,8,1,   7,9,2 ],

              [ 9,3,4,   6,1,7,   2,5,8 ],
              [ 5,1,7,   2,3,8,   9,6,4 ],
              [ 6,8,2,   4,5,9,   3,7,1 ],

              [ 1,5,9,   8,7,4,   6,2,3 ],
              [ 7,4,6,   3,2,5,   8,1,9 ],
              [ 3,2,8,   1,9,6,   5,4,7 ]];

//puzzle 2
let puzzleTwo = [[ 8,9,5,   7,4,2,   1,3,6 ],
                 [ 8,7,1,   9,6,3,   4,8,5 ],
                 [ 4,6,3,   5,8,1,   7,9,2 ],
                 [ 9,3,4,   6,1,7,   2,5,8 ],
                 [ 5,1,7,   2,3,8,   9,6,4 ],
                 [ 6,8,2,   4,5,9,   3,7,1 ],
                 [ 1,5,9,   8,7,4,   6,2,3 ],
                 [ 7,4,6,   3,2,5,   8,1,9 ],
                 [ 3,2,8,   1,9,6,   5,4,7 ]];
// FREEZE CODE END

function getRow(puzzle, row) {
  return puzzle[row];
};

function getColumn(puzzle, col) {
  let colArr = [];
  for (let i = 0; i < puzzle.length; i++) {
    colArr.push(puzzle[i][col]);
    }
    return colArr;
  };

function getSection(puzzle, x, y) {
  x *= 3;
  y *= 3;
  let section = [];
  for(let i = y; i < y + 3; i++) {
    for(let j = x; j < x + 3; j++) {
      section.push(puzzle[i][j]);
    }
  }
  return section;
};

function includes1To9(arr) {
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length; j++){
      if(j != i && arr[i] === arr[j]){
        return false;
        }
      }
    }
    return true;
  };

function sudokuIsValid(puzzle) {
  for (let i = 0; i < puzzle.length; i++) {
    let row = getRow(puzzle, i);
    let col = getColumn(puzzle, i);
    
    if (!includes1To9(row) || !includes1To9(col)) {
        return false;
        }
  }
  for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
      let section = getSection(puzzle, i, j);
      
      if (!includes1To9(section)) {
        return false;
        }
    }
  }
  return true;
}

// FREEZE CODE BEGIN
module.exports = {
  getRow,
  getColumn,
  getSection,
  includes1To9,
  sudokuIsValid,
  puzzle,
  puzzleTwo
};
// FREEZE CODE END
